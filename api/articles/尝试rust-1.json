{"title":"尝试rust-1","uid":"e922c45316b34ea7126c49048c6ca8da","slug":"尝试rust-1","date":"2023-11-29T11:23:49.000Z","updated":"2024-01-16T07:04:17.111Z","comments":true,"path":"api/articles/尝试rust-1.json","keywords":null,"cover":"/post/尝试rust-1/rust.png","content":"<p>rust 有强大的保管理工具 cargo，跟 npm 相似。对于 rust 的项目而言一般使用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">cargo new filename</span></span></code></pre></div><p>来初始化项目。</p>\n<p>通过 cargo 来下载相关的依赖包。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">cargo add package</span></span></code></pre></div><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">fn</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">()&#123;&#125;</span></span></code></pre></div><p>作为程序的入口。</p>\n<h2 id=\"数据声明\"><a href=\"#数据声明\" class=\"headerlink\" title=\"数据声明\"></a>数据声明</h2><h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3><p>在 rust 中，使用 let 来声明变量，但仅用 let 声明的变量仍然是不可变的要通过 mut 关键字来让变量可变。<br>eg：</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> x </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> //x是不可变的</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">mut</span><span style=\"color: #BABED8\"> y </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> //y是可变的</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">x </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> //会报错</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">y </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> //不会报错</span></span>\n<span class=\"line\"></span></code></pre></div><h3 id=\"常量声明\"><a href=\"#常量声明\" class=\"headerlink\" title=\"常量声明\"></a>常量声明</h3><p>常量使用 const 来声明，在 rust 中常亮通常用全部大写表示，当有多个单词时用 _ 隔开。<br>eg：</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> MAX_POINT </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h3 id=\"shadowing-隐藏\"><a href=\"#shadowing-隐藏\" class=\"headerlink\" title=\"shadowing&#x2F;隐藏\"></a>shadowing&#x2F;隐藏</h3><p>当我们使用相同的变量名定义新变量时，会 shadow 之前定义的变量。并且可以改变变量的类型。<br>eg：</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> x </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> x </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">   </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">；</span></span></code></pre></div><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h3><p>与数组相比 tuple 中的类型可以不一样<br>eg:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> tup</span><span style=\"color: #89DDFF\">:(</span><span style=\"color: #FFCB6B\">i32</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">char</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">u8</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">23</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">w</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #676E95; font-style: italic\"> //tuple的申明</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println!</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;&#123;&#125;&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">tup</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #676E95; font-style: italic\"> //tuple的访问</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">let</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">c</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tup</span><span style=\"color: #676E95; font-style: italic\"> //tuple的解构</span></span></code></pre></div><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #FFCB6B\">i32</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #676E95; font-style: italic\"> //基本与其他语言类似 申明时第一个代表类型第二个代表个数</span></span></code></pre></div><h2 id=\"语句与表达值\"><a href=\"#语句与表达值\" class=\"headerlink\" title=\"语句与表达值\"></a>语句与表达值</h2><p>在 rust 中可以把表达式赋值给变量，但不能把语句赋值给变量。eg：</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> x </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> y </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        y</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #676E95; font-style: italic\">  //默认将大括号内的最后一个表达式赋值给x，注意不能加 ； 因为加了分号就是一个语句不是表达式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;;</span></span></code></pre></div><p>在函数中也同理eg：</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">fn</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">fun</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">x</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #FFCB6B\">i32</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">i32</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  x</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #676E95; font-style: italic\">  //不加分号默认返回最后一个表达式，或用return返回</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div>","text":"rust 有强大的保管理工具 cargo，跟 npm 相似。对于 rust 的项目而言一般使用 rustcargo new filename来初始化项目。 通过...","permalink":"/post/尝试rust-1","photos":[],"count_time":{"symbolsCount":964,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"学习","slug":"学习","count":6,"path":"api/tags/学习.json"},{"name":"rust","slug":"rust","count":1,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">数据声明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">声明变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">常量声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shadowing-%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">shadowing&#x2F;隐藏</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%A5%96\"><span class=\"toc-text\">元祖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%80%BC\"><span class=\"toc-text\">语句与表达值</span></a></li></ol>","author":{"name":"CeazzZY","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60310690?v=4","link":"/","description":"因为没有任何意义, <br />这里仅仅“存在”即已完美。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"react源码-jsx","uid":"230b1e91322b312b83be58c66b0964f6","slug":"react源码-jsx","date":"2023-11-29T12:29:44.000Z","updated":"2023-12-09T13:37:45.000Z","comments":true,"path":"api/articles/react源码-jsx.json","keywords":null,"cover":"/post/react源码-jsx/react.jpeg","text":"1 ","permalink":"/post/react源码-jsx","photos":[],"count_time":{"symbolsCount":2,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"学习","slug":"学习","count":6,"path":"api/tags/学习.json"},{"name":"前端","slug":"前端","count":4,"path":"api/tags/前端.json"},{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"源码","slug":"源码","count":1,"path":"api/tags/源码.json"}],"author":{"name":"CeazzZY","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60310690?v=4","link":"/","description":"因为没有任何意义, <br />这里仅仅“存在”即已完美。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"next路由和路由跳转","uid":"82795e5babeacda4e2079c9fa98d4fbf","slug":"next路由和路由跳转","date":"2023-11-28T02:15:29.000Z","updated":"2024-04-09T16:25:55.811Z","comments":true,"path":"api/articles/next路由和路由跳转.json","keywords":null,"cover":"/post/next路由和路由跳转/nextjs.webp","text":"Routenext 的路由与 react 不同，不需要自己写路由表，在 next 中之需要你在 app&#x2F;pages（next14 中推荐 app）文件...","permalink":"/post/next路由和路由跳转","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"学习","slug":"学习","count":6,"path":"api/tags/学习.json"},{"name":"前端","slug":"前端","count":4,"path":"api/tags/前端.json"},{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"nextjs","slug":"nextjs","count":1,"path":"api/tags/nextjs.json"}],"author":{"name":"CeazzZY","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60310690?v=4","link":"/","description":"因为没有任何意义, <br />这里仅仅“存在”即已完美。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}